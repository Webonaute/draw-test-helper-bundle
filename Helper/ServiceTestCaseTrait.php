<?php

namespace Draw\Bundle\DrawTestHelperBundle\Helper;

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;

trait ServiceTestCaseTrait
{
    use NonRebootableKernelTestTrait;

    /**
     * @var bool
     */
    protected static $firstBoot = true;

    /**
     * @param array $options
     * @return \Symfony\Component\HttpKernel\KernelInterface
     */
    abstract protected function createKernel(array $options = array());

    /**
     * @param string $kernelName
     * @param boolean $debug - should we create a kernel with debug? Normally additional kernels don't need debug,
     * it only slows the test down
     * @return \Symfony\Component\HttpKernel\KernelInterface
     */
    protected static function getSharedKernel($kernelName = 'default', $debug = false)
    {
        if (!isset(KernelRegistry::$kernels[$kernelName])) {
            if (static::$firstBoot || $kernelName === 'default') {
                $debug = true;
            }
            if ($kernelName === 'delete') {
                if ($kernel = static::getKernelFromGlobals($kernelName) === null) {
                    $kernel = static::createKernel(['debug' => false]);
                    $GLOBALS['kernels']['delete'] = $kernel;
                    $kernel->boot();
                }
            } else {
                $kernel = static::createKernel(['debug' => $debug]);
                $kernel->boot();
            }

            KernelRegistry::$kernels[$kernelName] = $kernel;
        }

        static::$firstBoot = false;
        return KernelRegistry::$kernels[$kernelName];
    }

    private static function getKernelFromGlobals($kernelName)
    {
        if (isset($GLOBALS['kernels'][$kernelName])) {
            return $GLOBALS['kernels'][$kernelName];
        }
        return null;
    }

    protected static function clearKernelEntityManagerCache()
    {
        if (static::getSharedKernel()->getContainer() !== null) {
            static::getSharedKernel()->getContainer()->get('doctrine')->getManager()->clear();
        }
    }

    /**
     * @param $object
     * @param $propertyName
     * @param $value
     * @return mixed
     */
    protected function replacePropertyValue($object, $propertyName, $value)
    {
        $objectReflection = new \ReflectionObject($object);
        $propertyReflection = $objectReflection->getProperty($propertyName);
        if ($propertyReflection->isProtected() || $propertyReflection->isPrivate()) {
            $propertyReflection->setAccessible(true);
        }

        $oldValue = $propertyReflection->getValue($object);
        $propertyReflection->setValue($object, $value);

        return $oldValue;
    }

    /**
     * @param $object
     * @param $propertyName
     * @return \PHPUnit_Framework_MockObject_MockObject
     */
    protected function replacePropertyWithAutoGeneratedMock($object, $propertyName)
    {
        $objectReflection = new \ReflectionObject($object);
        $propertyReflection = $objectReflection->getProperty($propertyName);
        if ($propertyReflection->isProtected() || $propertyReflection->isPrivate()) {
            $propertyReflection->setAccessible(true);
        }

        $oldValue = $propertyReflection->getValue($object);
        $value = $this
            ->getMockBuilder(get_class($oldValue))
            ->disableOriginalConstructor()
            ->setMethods([])
            ->getMock();
        $propertyReflection->setValue($object, $value);

        return $value;
    }
    /**
     * @param $commandName
     * @param string $kernelName
     * @return CommandHelper
     */
    protected static function commandHelper($commandName, $kernelName = 'default')
    {
        $application = new Application($kernel = static::getSharedKernel($kernelName));

        $container = $kernel->getContainer();
        foreach ($application->all() as $command) {
            if ($command instanceof ContainerAwareInterface) {
                $command->setContainer($container);
            }
        }

        $application->setDispatcher($container->get('event_dispatcher'));
        return new CommandHelper($container, $application->find($commandName));
    }

}